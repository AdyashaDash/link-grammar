--- read-dict.c	2005-02-06 01:40:53.000000000 +1100
+++ ../../link-grammar-4.1.1-mar/link-grammar/read-dict.c	2005-02-08 
14:31:58.836878464 +1100
@@ -85,7 +85,7 @@
 
 */
 
-int advance(Dictionary dict);
+int link_advance(Dictionary dict);
 
 static void dict_error(Dictionary dict, char * s) {
     int i;
@@ -95,7 +95,7 @@
     for (i=0; i<5 && dict->token[0] != '\0' ; i++) {
 	sprintf(t, "\"%s\" ", dict->token);
 	strcat(tokens, t);
-	(void) advance(dict);
+	(void) link_advance(dict);
     }
     lperror(DICTPARSE, ". %s\n\t line %d, tokens = %s\n", 
 	    s, dict->line_number, tokens);
@@ -137,7 +137,7 @@
 */
 #define SPECIAL "(){};[]&|:"
 
-int advance(Dictionary dict) {
+int link_advance(Dictionary dict) {
    /* this reads the next token from the input into token */
     int c, i;
     int quote_mode;
@@ -293,7 +293,7 @@
 	n->type = CONNECTOR_type;		
 	n->cost = 0;
     }
-    if (!advance(dict)) {
+    if (!link_advance(dict)) {
 	return NULL;
     }
     return n;
@@ -379,8 +379,8 @@
     Exp * e;
 
     if (is_equal(dict, '&') || (strcmp(token, "and")==0)) {
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	return operator_exp(dict, AND_type);
     } else if (is_equal(dict, '|') || (strcmp(dict->token, "or")==0)) 
{
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	return operator_exp(dict, OR_type);
@@ -400,7 +400,7 @@
 
     Exp * n;
     if (is_equal(dict, '(')) {
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	n = in_parens(dict);
@@ -408,11 +408,11 @@
 	    dict_error(dict, "Expecting a \")\".");
 	    return NULL;
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
     } else if (is_equal(dict, '{')) {
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	n = in_parens(dict);
@@ -420,12 +420,12 @@
 	    dict_error(dict, "Expecting a \"}\".");
 	    return NULL;
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	n = make_optional_node(dict, n);
     } else if (is_equal(dict, '[')) {
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	n = in_parens(dict);
@@ -433,7 +433,7 @@
 	    dict_error(dict, "Expecting a \"]\".");
 	    return NULL;
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	n->cost += 1;
@@ -469,7 +469,7 @@
     Exp * nl=NULL, * nr, * n;
     E_list *ell, *elr;
     if (is_equal(dict, '(')) {
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	nl = expression(dict);
@@ -480,11 +480,11 @@
 	    dict_error(dict, "Expecting a \")\".");
 	    return NULL;
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
     } else if (is_equal(dict, '{')) {
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	nl = expression(dict);
@@ -495,12 +495,12 @@
 	    dict_error(dict, "Expecting a \"}\".");
 	    return NULL;
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	nl = make_optional_node(dict, nl);
     } else if (is_equal(dict, '[')) {
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	nl = expression(dict);
@@ -511,7 +511,7 @@
 	    dict_error(dict, "Expecting a \"]\".");
 	    return NULL;
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	nl->cost += 1;
@@ -532,2 +532,2 @@
 	if (!and_ok) {
 	    warning(dict, "\"and\" and \"or\" at the same level in an 
expression");
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	nr = restricted_expression(dict, TRUE,FALSE);
@@ -552,2 +552,2 @@
 	if (!or_ok) {
 	    warning(dict, "\"and\" and \"or\" at the same level in an 
expression");
 	}
-	if (!advance(dict)) {
+	if (!link_advance(dict)) {
 	    return NULL;
 	}
 	nr = restricted_expression(dict, FALSE,TRUE);
@@ -687,7 +687,7 @@
 
     Dict_node  *dn_new, *dnx, *dn = NULL;
 
-    for (; !is_equal(dict, ':') ; advance(dict)) {
+    for (; !is_equal(dict, ':') ; link_advance(dict)) {
 	  if (dict->is_special) {
 	      dict_error(dict, "I expected a word but didn\'t get it.");
 	      return 0;
@@ -707,7 +707,7 @@
 	      dn->string = string_set_add(dict->token, dict->string_set);
 	  }
     }
-    if (!advance(dict)) {  /* pass the : */
+    if (!link_advance(dict)) {  /* pass the : */
 	return 0;
     }
     n = expression(dict);
@@ -718,7 +718,7 @@
 	dict_error(dict, "Expecting \";\" at the end of an entry.");
 	return 0;
     }
-    if (!advance(dict)) {  /* pass the ; */
+    if (!link_advance(dict)) {  /* pass the ; */
 	return 0;
     }
 
@@ -772,7 +772,7 @@
 
 int read_dictionary(Dictionary dict) {
     lperrno = 0;
-    if (!advance(dict)) {
+    if (!link_advance(dict)) {
 	fclose(dict->fp);
 	return 0;
     }
